openapi: "3.0.0"
info:
  version: 1.0.0
  title: Yamasee Skypath - Turbulence and Weather Management in Commercial Aviation - Arnic API documentation
  description: |
    Skypath by Yamasee Inc is a unique service that can help airline pilots avoid clear air 
    turbulence. This is the API documentation for interacting with the Skypath server 
    for application developers. It describes the Skypath turbulence avoidance server 
    Rest API in OpenAPI 3.0 specification.
    You will need a partner API_KEY to be able to login to the system and get authentication 
    tokens valid for the different REST operations
  termsOfService: https://yamasee.global/terms/
  contact:
    name: Skypath API Team
    email: info@yamasee.global
    url: https://api.skypath.app
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: "https://api.skypath.app/skypath-logo.png"
    backgroundColor: "#FFFFFF"
    altText: "Skypath logo"

servers:
  - url: https://devserver.yamasee-skypath.com
    description: Development Server
  - url: https://server.yamasee-skypath.com
    description: Production Server

paths:
  /flight:
    get:
      operationId: get_flight_data
      description: Get flight plan
      security:
        - BearerToken: []
      parameters:
        - $ref: '#/components/parameters/flightPlanId'
        - $ref: '#/components/parameters/airlineId'
        - $ref: '#/components/parameters/flightId'
        - $ref: '#/components/parameters/departureAirport'
        - $ref: '#/components/parameters/arrivalAirport'
      responses:
        200:
          description: The flight data, filtered using requested filter
          content:
            application/json:
              schema:
                $ref: 'types.yml#/FlightData'
        401:
          $ref: 'responses.yml#/Unauthorized'

  /crew:
    get:
      operationId: get_crew
      description: Get the crew information
      security:
        - BearerToken: []
      parameters:
        - $ref: '#/components/parameters/flightPlanId'
      responses:
        200:
          description: The crew data, filtered by flight plan id (if used)
          content:
            application/json:
              schema:
                $ref: 'types.yml#/Crew'
        401:
          $ref: 'responses.yml#/Unauthorized'
  
  /waypoint:
    get:
      operationId: get_waypoints
      description: Get the waypoints data of a specific flight plan
      security:
        - BearerToken: []
      parameters:
        - $ref: '#/components/parameters/flightPlanId'
        - in: query
          name: waypoint_id
          description: The waypoint ID
          schema:
            type: string
        - in: query
          name: name
          description: The waypoint name
          schema:
            type: string
        - in: query
          name: estimated_altitude
          description: The waypoint estimated altitude
          schema:
            type: number
      responses:
        200:
          description: The crew data, filtered by flight plan id (if used)
          content:
            application/json:
              schema:
                $ref: 'types.yml#/Crew'
        400:
          description: Either `flight_plan_id`, `waypoint_id` or `name` are required
        401:
          $ref: 'responses.yml#/Unauthorized'

  /flight-data:
    post:
      operationId: post_flight_data
      description: Push new or update existing flight plan data
      security:
        - PartnerToken: []
      requestBody:
          description: Flight plan body, in JSON format
          required: true
          content:
            application/json:
              schema:
                type: object
      responses:
        200:
          description: OK - The data inserted succesfuly
          content:
            application/json:
              schema:
                type: string
        403:
          description: Unknown data format
        401:
          $ref: 'responses.yml#/Unauthorized'
  /route-waypoints:
    get:
      operationId: get_route_waypoints
      description: Get the waypoints data from query string
      security:
        - BearerToken: []
      parameters:
        - in: query
          name: route
          description: Route string (space separated waypoint names)
          schema:
            type: string
      responses:
        200:
          description: Waypoints data 
          content:
            application/json:
              schema:
                type: object
                properties:
                  waypoints:
                    type: array
                    items:
                      $ref: 'types.yml#/RouteWaypoint'
                  pathQuery:
                    type: array
                    items:
                      $ref: 'types.yml#/PathQueryElement'
        400:
          description: route parameter is required
        401:
          $ref: 'responses.yml#/Unauthorized'
components:
  parameters:
    flightPlanId:
      in: query
      name: flight_plan_id
      description: The flight plan ID
      schema:
        type: string
    airlineId:
      in: query
      name: airline_id
      description: The airline ID
      schema:
        type: string
    flightId:
      in: query
      name: flight_id
      description: The flight ID
      schema:
        type: string
    departureAirport:
      in: query
      name: departure_airport
      description: The departure airport
      schema:
        type: string
    arrivalAirport:
      in: query
      name: arrival_airport
      description: The arrival airport
      schema:
        type: string

  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      description: JWT non expired token recived in response to a successful login request    
    PartnerToken:
      type: apiKey
      in: header
      name: x-api-key